cscope 15 $HOME/kernel-build/rangeLockModule               0000014436
	@f3fs_range_lock_mod.c

1 
	~<löux/moduÀ.h
>

2 
	~<löux/öô.h
>

3 
	~<löux/kî√l.h
>

4 
	~<löux/¶ab.h
>

5 
	~<löux/li°.h
>

6 
	~<löux/kthªad.h
>

7 
	~<löux/dñay.h
>

8 
	~<löux/ty≥s.h
>

9 
	~<löux/î∫o.h
>

10 
	~<löux/¥ötk.h
>

12 
	~"lock‰ì_li°.h
"

14 
LIST_HEAD
(
thªad_w‹kîs
);

16 
thªad_èsk
(*
d©a
);

18 
__öô
 
	$lock‰ì_øngñock_öô
()

20 
ƒ_w‹kîs
 = 
	`num_⁄löe_˝us
();

21 
Li°RL
 *
li°_æ
 = 
	`kmÆloc
((Li°RL), 
GFP_KERNEL
);

23 
	`¥_öfo
("Lock-‰ìÑ™gêlock moduÀÜﬂdög: %d w‹kîs\n", 
ƒ_w‹kîs
);

25 
i
;

26 
i
 = 0; i < 
ƒ_w‹kîs
; i++) {

27 
thªad_w‹kî
 *
w‹kî
 = 
	`kmÆloc
((thªad_w‹kî), 
GFP_KERNEL
);

28 i‡(!
w‹kî
) {

29 
	`¥_îr
("FaûedÅÿÆloˇã mem‹y f‹ w‹kî %d\n", 
i
);

32 
w‹kî
->
w‹kî_id
 = 
i
;

33 
w‹kî
->
ønge_°¨t
 = (2 * 
i
Ë% 
ƒ_w‹kîs
;

34 
w‹kî
->
ønge_íd
 = (2 * 
i
 + 1Ë% 
ƒ_w‹kîs
;

35 
w‹kî
->
èsk
 = 
	`kthªad_run
(
thªad_èsk
, w‹kî, "lf_li°-w‹kî%d", 
i
);

36 i‡(
	`IS_ERR
(
w‹kî
->
èsk
)) {

37 
	`k‰ì
(
w‹kî
);

38 
	`¥_îr
("W‹kî %d faûedÅÿ°¨t.\n", 
i
);

41 
w‹kî
->
li°_æ
 =Üist_rl;

42 
	`li°_add_èû
(&
w‹kî
->
w‹kî_li°
, &
thªad_w‹kîs
);

43 
	`¥_öfo
("Suc˚ssfuŒyádded w‹kî %d i¿thªad_w‹kî†li°\n", 
i
);

46 
	`¥_öfo
("Lock-freeÑangeÜock module successfullyÜoaded.\n");

48 
	}
}

50 
__exô
 
	$lock‰ì_øngñock_exô
()

52 
thªad_w‹kî
 *
w‹kî
, *
tmp
;

53 
Li°RL
 *
li°_æ
 = 
NULL
;

54 
	`li°_f‹_óch_íåy_ß„
(
w‹kî
, 
tmp
, &
thªad_w‹kîs
, 
w‹kî_li°
) {

55 
	`kthªad_°›
(
w‹kî
->
èsk
);

56 
	`li°_dñ
(&
w‹kî
->
w‹kî_li°
);

57 i‡(!
li°_æ
)

58 
li°_æ
 = 
w‹kî
->list_rl;

59 
	`k‰ì
(
w‹kî
);

61 
	`k‰ì
(
li°_æ
);

62 
	`¥_öfo
("Lock-freeÑangeÜock module successfullyÑemoved.\n");

63 
	}
}

65 
moduÀ_öô
(
lock‰ì_øngñock_öô
);

66 
moduÀ_exô
(
lock‰ì_øngñock_exô
);

68 
MODULE_AUTHOR
("Sanglok Lee");

69 
MODULE_DESCRIPTION
("Lock-freeÑangeÜock module");

70 
MODULE_LICENSE
("GPL");

	@lockfree_list.c

1 
	~"lock‰ì_li°.h
"

2 
	~<löux/kthªad.h
>

3 
	~<löux/dñay.h
>

4 
	~<asm/cmpxchg.h
>

5 
	~<löux/øndom.h
>

7 
	#TRY_ONCE
 
åue


	)

9 
li°_hód
 
thªad_w‹kîs
;

11 
DñëeNode
(
LNode
* 
lock
);

13 
LNode
* 
	$InôNode
(
°¨t
, 
íd
, 
boﬁ
 
ªadî
)

15 
LNode
* 
ªt
 = 
	`kmÆloc
((LNode), 
GFP_KERNEL
);

16 
ªt
->
°¨t
 = start;

17 
ªt
->
íd
 =Énd;

18 
ªt
->
√xt
 = 
NULL
;

19 
ªt
->
ªadî
 =Ñeader;

20  
ªt
;

21 
	}
}

23 
boﬁ
 
	$m¨ked
(vﬁ©ûê
LNode
* 
node
){

24  ()(
node
) & 0x1;

25 
	}
}

27 
LNode
* 
	$unm¨k
(vﬁ©ûê
LNode
* 
node
)

29  (
LNode
*)(()(
node
) & 0xFFFFFFFFFFFFFFFE);

30 
	}
}

32 
	$r_vÆid©e
(
LNode
* 
lock
, 
boﬁ
 
åy_⁄˚
)

34 vﬁ©ûê
LNode
** 
¥ev
 = &
lock
->
√xt
;

35 
LNode
* 
cur
 = 
	`unm¨k
(*
¥ev
);

36 
åue
) {

37 i‡(!
cur
) {

40 i‡(
cur
 =
lock
) {

43 i‡(
	`m¨ked
(
cur
->
√xt
)) {

44 
LNode
* 
√xt
 = 
	`unm¨k
(
cur
->next);

45 i‡(
	`cmpxchg
(
¥ev
, 
cur
, 
√xt
) == cur) {

46 
	`k‰ì_rcu
(
cur
, 
rcu
);

48 
cur
 = 
√xt
;

49 } i‡(
cur
->
ªadî
) {

50 
¥ev
 = &
cur
->
√xt
;

51 
cur
 = 
	`unm¨k
(*
¥ev
);

53 i‡(
åy_⁄˚
) {

56 !
	`m¨ked
(
cur
->
√xt
)) {

57 
cur
 = *
¥ev
;

61 
	}
}

63 
	$w_vÆid©e
(vﬁ©ûê
LNode
** 
li°æ
, LNode* 
lock
)

65 vﬁ©ûê
LNode
** 
¥ev
 = 
li°æ
;

66 
LNode
* 
cur
 = 
	`unm¨k
(*
¥ev
);

67 
åue
) {

68 i‡(!
cur
) {

71 i‡(
cur
 =
lock
) {

74 i‡(
	`m¨ked
(
cur
->
√xt
)) {

75 
LNode
* 
√xt
 = 
	`unm¨k
(
cur
->next);

76 i‡(
	`cmpxchg
(
¥ev
, 
cur
, 
√xt
) == cur) {

77 
	`k‰ì_rcu
(
cur
, 
rcu
);

79 
cur
 = 
√xt
;

81 i‡(
cur
->
íd
 <
lock
->
°¨t
) {

82 
¥ev
 = &
cur
->
√xt
;

83 
cur
 = 
	`unm¨k
(*
¥ev
);

85 
	`DñëeNode
(
lock
);

90 
	}
}

92 
	$com∑ªRW
(
LNode
* 
lock1
, LNode* 
lock2
)

94 i‡(!
lock1
) {

97 
ªadîs
 = 
lock1
->
ªadî
 + 
lock2
->reader;

98 i‡(
lock2
->
°¨t
 >
lock1
->
íd
) {

101 i‡(
lock2
->
°¨t
 >
lock1
->°¨à&& 
ªadîs
 == 2) {

104 i‡(
lock1
->
°¨t
 >
lock2
->
íd
) {

107 i‡(
lock1
->
°¨t
 >
lock2
->°¨à&& 
ªadîs
 == 2) {

112 
	}
}

114 
	$In£πNodeRW
(vﬁ©ûê
LNode
** 
li°æ
, LNode* 
lock
, 
boﬁ
 
åy_⁄˚
)

116 
	`rcu_ªad_lock
();

117 
åue
) {

118 vﬁ©ûê
LNode
** 
¥ev
 = 
li°æ
;

119 
LNode
* 
cur
 = *
¥ev
;

120 
åue
) {

121 i‡(
	`m¨ked
(
cur
)){

125 i‡(
cur
 && 
	`m¨ked
(cur->
√xt
)) {

126 
LNode
* 
√xt
 = 
	`unm¨k
(
cur
->next);

127 i‡(
	`cmpxchg
(
¥ev
, 
cur
, 
√xt
) == cur) {

128 
	`k‰ì_rcu
(
cur
, 
rcu
);

130 
cur
 = 
√xt
;

133 
ªt
 = 
	`com∑ªRW
(
cur
, 
lock
);

137 i‡(
ªt
 == -1) {

138 
¥ev
 = &
cur
->
√xt
;

139 
cur
 = *
¥ev
;

140 } i‡(
ªt
 == 0) {

141 i‡(
åy_⁄˚
) {

142 
	`rcu_ªad_u∆ock
();

145 !
	`m¨ked
(
cur
->
√xt
)) {

146 
cur
 = *
¥ev
;

148 } i‡(
ªt
 == 1) {

149 
lock
->
√xt
 = 
cur
;

150 i‡(
	`cmpxchg
(
¥ev
, 
cur
, 
lock
) == cur) {

152 
ªt
 = 0;

153 i‡(
lock
->
ªadî
) {

154 
ªt
 = 
	`r_vÆid©e
(
lock
, 
åy_⁄˚
);

156 
ªt
 = 
	`w_vÆid©e
(
li°æ
, 
lock
);

158 
	`rcu_ªad_u∆ock
();

159  
ªt
;

161 
cur
 = *
¥ev
;

167 
	`rcu_ªad_u∆ock
();

169 
	}
}

171 
R™geLock
* 
	$RWR™geAcquúe
(
Li°RL
* 
li°_æ
,

172 
°¨t
, 
íd
, 
boﬁ
 
ªadî
)

174 
R™geLock
* 
æ
 = 
	`kmÆloc
((R™geLock), 
GFP_KERNEL
);

175 
ªt
 = 0;

176 #i‡
HASH_MODE


177 i‡(
íd
 =
MAX_SIZE
) {

178 
	`as£π
(
°¨t
 == 0);

179 
æ
->
buckë
 = 
ALL_RANGE
;

180 
i
 = 0 ; i < 
BUCKET_CNT
 ; i++) {

181 
æ
->
node
[
i
] = 
	`InôNode
(0, 
MAX_SIZE
, 
ªadî
);

183 
ªt
 = 
	`In£πNodeRW
(&
li°_æ
->
hód
[
i
], 
æ
->
node
[i], 
TRY_ONCE
);

184 } 
ªt
);

187 
i
 = 
°¨t
 % 
BUCKET_CNT
;

188 
	`as£π
(
°¨t
 + 1 =
íd
);

189 
æ
->
buckë
 = 
i
;

190 
æ
->
node
[
i
] = 
	`InôNode
(
°¨t
, 
íd
, 
ªadî
);

192 
ªt
 = 
	`In£πNodeRW
(&
li°_æ
->
hód
[
i
], 
æ
->
node
[i], 
TRY_ONCE
);

193 } 
ªt
);

195  
æ
;

197 
æ
->
node
 = 
	`InôNode
(
°¨t
, 
íd
, 
ªadî
);

199 
ªt
 = 
	`In£πNodeRW
(&
li°_æ
->
hód
, 
æ
->
node
, 
TRY_ONCE
);

200 } 
ªt
);

202  
æ
;

204 
	}
}

206 
	$DñëeNode
(
LNode
* 
lock
)

208 
åue
) {

209 vﬁ©ûê
LNode
* 
‹ig
 = 
lock
->
√xt
;

210 
m¨ked
 = ()
‹ig
 + 1;

211 i‡(
	`cmpxchg
(&
lock
->
√xt
, 
‹ig
, (
LNode
*)
m¨ked
) == orig) {

215 
	}
}

217 
	$MuãxR™geRñó£
(
R™geLock
* 
æ
)

219 #i‡
HASH_MODE


220 i‡(
æ
->
buckë
 =
ALL_RANGE
) {

221 
i
 = 0 ; i < 
BUCKET_CNT
 ; i++) {

222 
	`DñëeNode
(
æ
->
node
[
i
]);

225 
	`DñëeNode
(
æ
->
node
[æ->
buckë
]);

227 
	`k‰ì
(
æ
);

229 
	`DñëeNode
(
æ
->
node
);

230 
	`k‰ì
(
æ
);

232 
	}
}

234 
	$thªad_èsk
(*
d©a
)

236 
thªad_w‹kî
 *
w‹kî
 = 
d©a
;

237 
R™geLock
* 
lock
;

238 
ønge_°¨t
 = 
w‹kî
->range_start;

239 
ønge_íd
 = 
w‹kî
->range_end;

240 
cou¡
 = 0;

241 !
	`kthªad_should_°›
()) {

242 if(
	`m¶ìp_öãºu±ibÀ
(500)){

246 
boﬁ
 
ªadî
 = (
	`gë_øndom_u32
() % 2) == 0;

247 
lock
 = 
	`RWR™geAcquúe
(
w‹kî
->
li°_æ
, 
ønge_°¨t
, 
ønge_íd
, 
ªadî
);

248 
	`¥_öfo
("[w‹kî %d] In£πedÇode‘™ge: %d - %d)", 
w‹kî
->
w‹kî_id
, 
ønge_°¨t
, 
ønge_íd
);

250 
	`BUG_ON
(!
lock
);

252 if(
	`m¶ìp_öãºu±ibÀ
(1000)){

256 
	`MuãxR™geRñó£
(
lock
);

257 
cou¡
++;

259 if(
	`m¶ìp_öãºu±ibÀ
(1000)){

263 
	`¥_öfo
("[w‹kî %d]Üock cy˛e†com∂ëed: %d\n", 
w‹kî
->
w‹kî_id
, 
cou¡
);

265 
	}
}

	@lockfree_list.h

1 #i‚de‡
LOCKFREE_LIST_H


2 
	#LOCKFREE_LIST_H


	)

4 
	~<löux/li°.h
>

5 
	~<löux/¶ab.h
>

6 
	~<löux/˝umask.h
>

7 
	~<löux/sched.h
>

9 
	#HASH_MODE
 0

	)

10 
	#IN_KERNEL2
 1

	)

12 
	#LIST_HEAD
(
«me
Ë
li°_hód
Çamê
	`LIST_HEAD_INIT
“ame)

	)

14 
	sLNode
 {

15 
	m°¨t
;

16 
	míd
;

17 vﬁ©ûê
LNode
* 
	m√xt
;

18 
	mªadî
;

19 #i‡
IN_KERNEL2


20 
rcu_hód
 
	mrcu
;

24 
	sLi°RL
 {

25 #i‡
HASH_MODE


26 vﬁ©ûê
LNode
* 
	mhód
[
BUCKET_CNT
];

28 vﬁ©ûê
LNode
* 
	mhód
;

33 
	sR™geLock
 {

34 #i‡
HASH_MODE


35 
LNode
* 
	mnode
[
BUCKET_CNT
];

36 
	mbuckë
;

38 
LNode
* 
	mnode
;

42 
	sthªad_w‹kî
 {

43 
	mønge_°¨t
;

44 
	mønge_íd
;

45 
Li°RL
 *
	mli°_æ
;

46 
	mw‹kî_id
;

47 
èsk_°ru˘
 *
	mèsk
;

48 
li°_hód
 
	mw‹kî_li°
;

	@/usr/include/linux/errno.h

1 
	~<asm/î∫o.h
>

	@/usr/include/linux/kernel.h

2 #i‚de‡
_LINUX_KERNEL_H


3 
	#_LINUX_KERNEL_H


	)

5 
	~<löux/sysöfo.h
>

6 
	~<löux/c⁄°.h
>

	@/usr/include/linux/module.h

2 #i‚de‡
_LINUX_MODULE_H


3 
	#_LINUX_MODULE_H


	)

6 
	#MODULE_INIT_IGNORE_MODVERSIONS
 1

	)

7 
	#MODULE_INIT_IGNORE_VERMAGIC
 2

	)

	@/usr/include/linux/random.h

8 #i‚de‡
_LINUX_RANDOM_H


9 
	#_LINUX_RANDOM_H


	)

11 
	~<löux/ty≥s.h
>

12 
	~<löux/io˘l.h
>

13 
	~<löux/úqƒ.h
>

18 
	#RNDGETENTCNT
 
	`_IOR
–'R', 0x00, )

	)

21 
	#RNDADDTOENTCNT
 
	`_IOW
–'R', 0x01, )

	)

24 
	#RNDGETPOOL
 
	`_IOR
–'R', 0x02, [2] )

	)

30 
	#RNDADDENTROPY
 
	`_IOW
–'R', 0x03, [2] )

	)

33 
	#RNDZAPENTCNT
 
	`_IO
–'R', 0x04 )

	)

36 
	#RNDCLEARPOOL
 
	`_IO
–'R', 0x06 )

	)

39 
	#RNDRESEEDCRNG
 
	`_IO
–'R', 0x07 )

	)

41 
	sønd_poﬁ_öfo
 {

42 
	míå›y_cou¡
;

43 
	mbuf_size
;

44 
__u32
 
	mbuf
[0];

54 
	#GRND_NONBLOCK
 0x0001

	)

55 
	#GRND_RANDOM
 0x0002

	)

56 
	#GRND_INSECURE
 0x0004

	)

	@/usr/include/linux/sched.h

2 #i‚de‡
_LINUX_SCHED_H


3 
	#_LINUX_SCHED_H


	)

5 
	~<löux/ty≥s.h
>

10 
	#CSIGNAL
 0x000000f‡

	)

11 
	#CLONE_VM
 0x00000100

	)

12 
	#CLONE_FS
 0x00000200

	)

13 
	#CLONE_FILES
 0x00000400

	)

14 
	#CLONE_SIGHAND
 0x00000800

	)

15 
	#CLONE_PIDFD
 0x00001000

	)

16 
	#CLONE_PTRACE
 0x00002000

	)

17 
	#CLONE_VFORK
 0x00004000

	)

18 
	#CLONE_PARENT
 0x00008000

	)

19 
	#CLONE_THREAD
 0x00010000

	)

20 
	#CLONE_NEWNS
 0x00020000

	)

21 
	#CLONE_SYSVSEM
 0x00040000

	)

22 
	#CLONE_SETTLS
 0x00080000

	)

23 
	#CLONE_PARENT_SETTID
 0x00100000

	)

24 
	#CLONE_CHILD_CLEARTID
 0x00200000

	)

25 
	#CLONE_DETACHED
 0x00400000

	)

26 
	#CLONE_UNTRACED
 0x00800000

	)

27 
	#CLONE_CHILD_SETTID
 0x01000000

	)

28 
	#CLONE_NEWCGROUP
 0x02000000

	)

29 
	#CLONE_NEWUTS
 0x04000000

	)

30 
	#CLONE_NEWIPC
 0x08000000

	)

31 
	#CLONE_NEWUSER
 0x10000000

	)

32 
	#CLONE_NEWPID
 0x20000000

	)

33 
	#CLONE_NEWNET
 0x40000000

	)

34 
	#CLONE_IO
 0x80000000

	)

37 
	#CLONE_CLEAR_SIGHAND
 0x100000000ULL

	)

38 
	#CLONE_INTO_CGROUP
 0x200000000ULL

	)

44 
	#CLONE_NEWTIME
 0x00000080

	)

46 #i‚de‡
__ASSEMBLY__


92 
	s˛⁄e_¨gs
 {

93 
__Æig√d_u64
 
	mÊags
;

94 
__Æig√d_u64
 
	mpidfd
;

95 
__Æig√d_u64
 
	mchûd_tid
;

96 
__Æig√d_u64
 
	m∑ª¡_tid
;

97 
__Æig√d_u64
 
	mexô_sig«l
;

98 
__Æig√d_u64
 
	m°ack
;

99 
__Æig√d_u64
 
	m°ack_size
;

100 
__Æig√d_u64
 
	més
;

101 
__Æig√d_u64
 
	m£t_tid
;

102 
__Æig√d_u64
 
	m£t_tid_size
;

103 
__Æig√d_u64
 
	mcgroup
;

107 
	#CLONE_ARGS_SIZE_VER0
 64

	)

108 
	#CLONE_ARGS_SIZE_VER1
 80

	)

109 
	#CLONE_ARGS_SIZE_VER2
 88

	)

114 
	#SCHED_NORMAL
 0

	)

115 
	#SCHED_FIFO
 1

	)

116 
	#SCHED_RR
 2

	)

117 
	#SCHED_BATCH
 3

	)

119 
	#SCHED_IDLE
 5

	)

120 
	#SCHED_DEADLINE
 6

	)

123 
	#SCHED_RESET_ON_FORK
 0x40000000

	)

128 
	#SCHED_FLAG_RESET_ON_FORK
 0x01

	)

129 
	#SCHED_FLAG_RECLAIM
 0x02

	)

130 
	#SCHED_FLAG_DL_OVERRUN
 0x04

	)

131 
	#SCHED_FLAG_KEEP_POLICY
 0x08

	)

132 
	#SCHED_FLAG_KEEP_PARAMS
 0x10

	)

133 
	#SCHED_FLAG_UTIL_CLAMP_MIN
 0x20

	)

134 
	#SCHED_FLAG_UTIL_CLAMP_MAX
 0x40

	)

136 
	#SCHED_FLAG_KEEP_ALL
 (
SCHED_FLAG_KEEP_POLICY
 | \

137 
SCHED_FLAG_KEEP_PARAMS
)

	)

139 
	#SCHED_FLAG_UTIL_CLAMP
 (
SCHED_FLAG_UTIL_CLAMP_MIN
 | \

140 
SCHED_FLAG_UTIL_CLAMP_MAX
)

	)

142 
	#SCHED_FLAG_ALL
 (
SCHED_FLAG_RESET_ON_FORK
 | \

143 
SCHED_FLAG_RECLAIM
 | \

144 
SCHED_FLAG_DL_OVERRUN
 | \

145 
SCHED_FLAG_KEEP_ALL
 | \

146 
SCHED_FLAG_UTIL_CLAMP
)

	)

	@/usr/include/linux/types.h

2 #i‚de‡
_LINUX_TYPES_H


3 
	#_LINUX_TYPES_H


	)

5 
	~<asm/ty≥s.h
>

7 #i‚de‡
__ASSEMBLY__


9 
	~<löux/posix_ty≥s.h
>

17 #ifde‡
__CHECKER__


18 
	#__bôwi£__
 
	`__©åibuã__
((
bôwi£
))

	)

20 
	#__bôwi£__


	)

22 
	#__bôwi£
 
__bôwi£__


	)

24 
__u16
 
	t__bôwi£
 
	t__À16
;

25 
__u16
 
	t__bôwi£
 
	t__be16
;

26 
__u32
 
	t__bôwi£
 
	t__À32
;

27 
__u32
 
	t__bôwi£
 
	t__be32
;

28 
__u64
 
	t__bôwi£
 
	t__À64
;

29 
__u64
 
	t__bôwi£
 
	t__be64
;

31 
__u16
 
	t__bôwi£
 
	t__sum16
;

32 
__u32
 
	t__bôwi£
 
	t__wsum
;

43 
	#__Æig√d_u64
 
__u64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

44 
	#__Æig√d_be64
 
__be64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

45 
	#__Æig√d_À64
 
__À64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

47 
	t__bôwi£
 
	t__pﬁl_t
;

	@/usr/include/linux/const.h

4 #i‚de‡
_LINUX_CONST_H


5 
	#_LINUX_CONST_H


	)

16 #ifde‡
__ASSEMBLY__


17 
	#_AC
(
X
,
Y
Ë
	)
X

18 
	#_AT
(
T
,
X
Ë
	)
X

20 
	#__AC
(
X
,
Y
Ë(X##Y)

	)

21 
	#_AC
(
X
,
Y
Ë
	`__AC
(X,Y)

	)

22 
	#_AT
(
T
,
X
Ë((T)(X))

	)

25 
	#_UL
(
x
Ë(
	`_AC
(x, 
UL
))

	)

26 
	#_ULL
(
x
Ë(
	`_AC
(x, 
ULL
))

	)

28 
	#_BITUL
(
x
Ë(
	`_UL
(1Ë<< (x))

	)

29 
	#_BITULL
(
x
Ë(
	`_ULL
(1Ë<< (x))

	)

31 
	#__ALIGN_KERNEL
(
x
, 
a
Ë
	`__ALIGN_KERNEL_MASK
(x, (
	`__ty≥of__
(x))◊Ë- 1)

	)

32 
	#__ALIGN_KERNEL_MASK
(
x
, 
mask
Ë(((xË+ (mask)Ë& ~(mask))

	)

34 
	#__KERNEL_DIV_ROUND_UP
(
n
, 
d
Ë((“Ë+ (dË- 1Ë/ (d))

	)

	@/usr/include/linux/ioctl.h

2 #i‚de‡
_LINUX_IOCTL_H


3 
	#_LINUX_IOCTL_H


	)

5 
	~<asm/io˘l.h
>

	@/usr/include/linux/irqnr.h

	@/usr/include/linux/posix_types.h

2 #i‚de‡
_LINUX_POSIX_TYPES_H


3 
	#_LINUX_POSIX_TYPES_H


	)

5 
	~<löux/°ddef.h
>

22 #unde‡
__FD_SETSIZE


23 
	#__FD_SETSIZE
 1024

	)

26 
	mfds_bôs
[
__FD_SETSIZE
 / (8 * ())];

27 } 
	t__kî√l_fd_£t
;

30 (*
	t__kî√l_sigh™dÀr_t
)();

33 
	t__kî√l_key_t
;

34 
	t__kî√l_mqd_t
;

36 
	~<asm/posix_ty≥s.h
>

	@/usr/include/linux/sysinfo.h

2 #i‚de‡
_LINUX_SYSINFO_H


3 
	#_LINUX_SYSINFO_H


	)

5 
	~<löux/ty≥s.h
>

7 
	#SI_LOAD_SHIFT
 16

	)

8 
	ssysöfo
 {

9 
__kî√l_l⁄g_t
 
	mu±ime
;

10 
__kî√l_ul⁄g_t
 
	mlﬂds
[3];

11 
__kî√l_ul⁄g_t
 
	mtŸÆøm
;

12 
__kî√l_ul⁄g_t
 
	m‰ìøm
;

13 
__kî√l_ul⁄g_t
 
	msh¨edøm
;

14 
__kî√l_ul⁄g_t
 
	mbuf„ºam
;

15 
__kî√l_ul⁄g_t
 
	mtŸÆsw≠
;

16 
__kî√l_ul⁄g_t
 
	m‰ìsw≠
;

17 
__u16
 
	m¥ocs
;

18 
__u16
 
	m∑d
;

19 
__kî√l_ul⁄g_t
 
	mtŸÆhigh
;

20 
__kî√l_ul⁄g_t
 
	m‰ìhigh
;

21 
__u32
 
	mmem_unô
;

22 
	m_f
[20-2*(
__kî√l_ul⁄g_t
)-(
__u32
)];

	@/usr/include/linux/stddef.h

2 #i‚de‡
_LINUX_STDDEF_H


3 
	#_LINUX_STDDEF_H


	)

7 #i‚de‡
__Æways_ölöe


8 
	#__Æways_ölöe
 
__ölöe__


	)

26 
	#__°ru˘_group
(
TAG
, 
NAME
, 
ATTRS
, 
MEMBERS
...) \

28 °ru˘ { 
MEMBERS
 } 
ATTRS
; \

29 
	sTAG
 { 
MEMBERS
 } 
ATTRS
 
NAME
; \

30 } 
ATTRS


	)

42 
	#__DECLARE_FLEX_ARRAY
(
TYPE
, 
NAME
) \

44 °ru˘ { } 
__em±y_
 ## 
NAME
; \

45 
TYPE
 
NAME
[]; \

46 }

	)

	@
1
.
1
/usr/include
15
390
f3fs_range_lock_mod.c
lockfree_list.c
lockfree_list.h
/usr/include/linux/errno.h
/usr/include/linux/kernel.h
/usr/include/linux/module.h
/usr/include/linux/random.h
/usr/include/linux/sched.h
/usr/include/linux/types.h
/usr/include/linux/const.h
/usr/include/linux/ioctl.h
/usr/include/linux/irqnr.h
/usr/include/linux/posix_types.h
/usr/include/linux/sysinfo.h
/usr/include/linux/stddef.h
